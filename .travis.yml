dist: trusty

cache: packages

notifications:
  email:
    on_failure: always
    on_success: change

env:
  global:
    - secure: "BHmcyu40Qj75Fy8tk41jiwS+OiGPVUmtgC3GUF8zk5maCK7NRMJ3rNb7FjX0/l/lRAZwMKOhcV7F7LxKMctm4gt8WXflUv31Hz3ajG+aQC8XPBUtexmbyvlTA7jjD3viK21bSTr3Sre93L9mVPn4MWOyaApFQFl+ZVZ48P1zCRiGn7MY/8KsCCjb2RR5Qpv26mrgYyUxbgOuuOH5X842bLPr1ocrYTa+OG49omHxRIq8PSeG1CK9zJ43QZas+VmG+4rwYmbu50G+XcZdOeSe3b2FENGrMha/H23lIi4u8Ywoey436YaQsAYAh3Jda/uI8B/wwjN+9YZfTU3kzXjs9RWPWqajIAQXGQ8GAeoHwGbyrLHxYQ4Q6lTF43wOkkzRYy7qP0jGgVurlrlHV/ClsUX9kgWg3sl3NfBDp6nbD1mmxtdYqaLHgDpRTseWcQ5+mUOXUtEVz+dcg4rrhIRA4VJIUWPZqMOTVwzGeU9sLZNIjYQ06aSNHb9Ym+Q9abfBsAFFhUKjCGp5Q4+iTGKfVEH1iGE0FLROVgFAFPedJ3HegXUiKUavYdcNhEERsVy+doX2UXYSoHr1Jq2Ml88Wk407+OYxXb4t70FovVG3gu+R2zl/Tp8UAu6IaY0vX0OvLhnYVXoKpw5dvXvK/se+PpOPXR8a+E724S30bgV+7cw="

matrix:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - sourceline: "ppa:team-gcc-arm-embedded/ppa"
            - ubuntu-toolchain-r-test
          packages:
            - lib32z1
            - lib32ncurses5
            - lib32bz2-1.0
            - gcc-arm-embedded
            - g++-7
            - lcov
            - valgrind
            - doxygen
            - python3-pip
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

language: cpp
compiler: gcc

before_install:
  - eval "${MATRIX_EVAL}"

install:
  - pip3 install --user -U pip
  - pip3 install --user jinja2 Pygments

script:
  - make # run the cross-compiler
  - mkdir cmake-build-debug
  - cd cmake-build-debug
  - cmake -DCMAKE_BUILD_TYPE=Debug -G "CodeBlocks - Unix Makefiles" .. # .. is now the source dir
  - cmake --build . --target OkapiLibV5 -- -j 2 # . is the build dir
  - ./OkapiLibV5
  - valgrind --tool=memcheck --leak-check=full --leak-resolution=med --show-leak-kinds=all --undef-value-errors=yes --track-origins=yes  --error-exitcode=1 --show-reachable=no ./OkapiLibV5
  # - valgrind --tool=massif --stacks=yes --time-unit=B --massif-out-file=massif.out.txt ./OkapiLibV5
  # - ms_print massif.out.txt
  - cd ..
  - ./run_doxygen.sh

# deploy:
#   provider: pages
#   skip_cleanup: true
#   local_dir: html
#   github_token: $GH_PAGES_TOKEN
#   on:
#     branch: master

after_success:
  - lcov --directory . --capture --output-file coverage.info # capture coverage info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
  - lcov --list coverage.info # debug info
  # Uploading report to CodeCov
  - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
